// Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

using System;
using System.Collections;
using System.Collections.Generic;
using Hazelcast.Client.Protocol;
using Hazelcast.Client.Protocol.Codec.BuiltIn;
using Hazelcast.Client.Protocol.Codec.Custom;
using Hazelcast.Client.Protocol.Util;
using Hazelcast.IO;
using Hazelcast.IO.Serialization;
using static Hazelcast.Client.Protocol.Codec.BuiltIn.FixedSizeTypesCodec;
using static Hazelcast.Client.Protocol.ClientMessage;
using static Hazelcast.IO.Bits;
using Hazelcast.Logging;

namespace Hazelcast.Client.Protocol.Codec
{
    // This file is auto-generated by the Hazelcast Client Protocol Code Generator.
    // To change this file, edit the templates or the protocol
    // definitions on the https://github.com/hazelcast/hazelcast-client-protocol
    // and regenerate it.

    /// <summary>
    /// Adds a MapPartitionLostListener. The addPartitionLostListener returns a register-id. This id is needed to remove
    /// the MapPartitionLostListener using the removePartitionLostListener(String) method.
    /// There is no check for duplicate registrations, so if you register the listener twice, it will get events twice.
    /// IMPORTANT: Please see com.hazelcast.partition.PartitionLostListener for weaknesses.
    /// IMPORTANT: Listeners registered from HazelcastClient may miss some of the map partition lost events due
    /// to design limitations.
    ///</summary>
    internal static class MapAddPartitionLostListenerCodec
    {
        //hex: 0x011B00
        public const int RequestMessageType = 72448;
        //hex: 0x011B01
        public const int ResponseMessageType = 72449;
        private const int RequestLocalOnlyFieldOffset = PartitionIdFieldOffset + IntSizeInBytes;
        private const int RequestInitialFrameSize = RequestLocalOnlyFieldOffset + BoolSizeInBytes;
        private const int ResponseResponseFieldOffset = ResponseBackupAcksFieldOffset + ByteSizeInBytes;
        private const int ResponseInitialFrameSize = ResponseResponseFieldOffset + GuidSizeInBytes;
        private const int EventMapPartitionLostPartitionIdFieldOffset = PartitionIdFieldOffset + IntSizeInBytes;
        private const int EventMapPartitionLostUuidFieldOffset = EventMapPartitionLostPartitionIdFieldOffset + IntSizeInBytes;
        private const int EventMapPartitionLostInitialFrameSize = EventMapPartitionLostUuidFieldOffset + GuidSizeInBytes;
        // hex: 0x011B02
        private const int EventMapPartitionLostMessageType = 72450;

        public static ClientMessage EncodeRequest(string name, bool localOnly)
        {
            var clientMessage = CreateForEncode();
            clientMessage.IsRetryable = false;
            clientMessage.OperationName = "Map.AddPartitionLostListener";
            var initialFrame = new Frame(new byte[RequestInitialFrameSize], UnfragmentedMessage);
            EncodeInt(initialFrame.Content, TypeFieldOffset, RequestMessageType);
            EncodeInt(initialFrame.Content, PartitionIdFieldOffset, -1);
            EncodeBool(initialFrame.Content, RequestLocalOnlyFieldOffset, localOnly);
            clientMessage.Add(initialFrame);
            StringCodec.Encode(clientMessage, name);
            return clientMessage;
        }

        public class ResponseParameters
        {

            /// <summary>
            /// returns the registration id for the MapPartitionLostListener.
            ///</summary>
            public Guid Response;
        }

        public static ResponseParameters DecodeResponse(ClientMessage clientMessage)
        {
            var iterator = clientMessage.GetIterator();
            var response = new ResponseParameters();
            var initialFrame = iterator.Next();
            response.Response = DecodeGuid(initialFrame.Content, ResponseResponseFieldOffset);
            return response;
        }

        public static class EventHandler
        {
            public static void HandleEvent(ClientMessage clientMessage, HandleMapPartitionLostEvent handleMapPartitionLostEvent)
            {
                var messageType = clientMessage.MessageType;
                var iterator = clientMessage.GetIterator();
                if (messageType == EventMapPartitionLostMessageType) {
                    var initialFrame = iterator.Next();
                    int partitionId =  DecodeInt(initialFrame.Content, EventMapPartitionLostPartitionIdFieldOffset);
                    Guid uuid =  DecodeGuid(initialFrame.Content, EventMapPartitionLostUuidFieldOffset);
                    handleMapPartitionLostEvent(partitionId, uuid);
                    return;
                }
                Logger.GetLogger(typeof(EventHandler)).Finest("Unknown message type received on event handler :" + messageType);
            }
            public delegate void HandleMapPartitionLostEvent(int partitionId, Guid uuid);
        }
    }
}