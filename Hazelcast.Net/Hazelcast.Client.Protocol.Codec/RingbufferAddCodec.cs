// Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

using System;
using System.Collections;
using System.Collections.Generic;
using Hazelcast.Client.Protocol;
using Hazelcast.Client.Protocol.Codec.BuiltIn;
using Hazelcast.Client.Protocol.Codec.Custom;
using Hazelcast.Client.Protocol.Util;
using Hazelcast.IO;
using Hazelcast.IO.Serialization;
using static Hazelcast.Client.Protocol.Codec.BuiltIn.FixedSizeTypesCodec;
using static Hazelcast.Client.Protocol.ClientMessage;
using static Hazelcast.IO.Bits;

namespace Hazelcast.Client.Protocol.Codec
{
    // This file is auto-generated by the Hazelcast Client Protocol Code Generator.
    // To change this file, edit the templates or the protocol
    // definitions on the https://github.com/hazelcast/hazelcast-client-protocol
    // and regenerate it.

    /// <summary>
    /// Adds an item to the tail of the Ringbuffer. If there is space in the ringbuffer, the call
    /// will return the sequence of the written item. If there is no space, it depends on the overflow policy what happens:
    /// OverflowPolicy OVERWRITE we just overwrite the oldest item in the ringbuffer and we violate the ttl
    /// OverflowPolicy FAIL we return -1. The reason that FAIL exist is to give the opportunity to obey the ttl.
    /// <p/>
    /// This sequence will always be unique for this Ringbuffer instance so it can be used as a unique id generator if you are
    /// publishing items on this Ringbuffer. However you need to take care of correctly determining an initial id when any node
    /// uses the ringbuffer for the first time. The most reliable way to do that is to write a dummy item into the ringbuffer and
    /// use the returned sequence as initial  id. On the reading side, this dummy item should be discard. Please keep in mind that
    /// this id is not the sequence of the item you are about to publish but from a previously published item. So it can't be used
    /// to find that item.
    ///</summary>
    internal static class RingbufferAddCodec
    {
        //hex: 0x170600
        public const int RequestMessageType = 1508864;
        //hex: 0x170601
        public const int ResponseMessageType = 1508865;
        private const int RequestOverflowPolicyFieldOffset = PartitionIdFieldOffset + IntSizeInBytes;
        private const int RequestInitialFrameSize = RequestOverflowPolicyFieldOffset + IntSizeInBytes;
        private const int ResponseResponseFieldOffset = ResponseBackupAcksFieldOffset + ByteSizeInBytes;
        private const int ResponseInitialFrameSize = ResponseResponseFieldOffset + LongSizeInBytes;

        public static ClientMessage EncodeRequest(string name, int overflowPolicy, IData @value)
        {
            var clientMessage = CreateForEncode();
            clientMessage.IsRetryable = false;
            clientMessage.OperationName = "Ringbuffer.Add";
            var initialFrame = new Frame(new byte[RequestInitialFrameSize], UnfragmentedMessage);
            EncodeInt(initialFrame.Content, TypeFieldOffset, RequestMessageType);
            EncodeInt(initialFrame.Content, PartitionIdFieldOffset, -1);
            EncodeInt(initialFrame.Content, RequestOverflowPolicyFieldOffset, overflowPolicy);
            clientMessage.Add(initialFrame);
            StringCodec.Encode(clientMessage, name);
            DataCodec.Encode(clientMessage, @value);
            return clientMessage;
        }

        public class ResponseParameters
        {

            /// <summary>
            /// the sequence of the added item, or -1 if the add failed.
            ///</summary>
            public long Response;
        }

        public static ResponseParameters DecodeResponse(ClientMessage clientMessage)
        {
            var iterator = clientMessage.GetIterator();
            var response = new ResponseParameters();
            var initialFrame = iterator.Next();
            response.Response = DecodeLong(initialFrame.Content, ResponseResponseFieldOffset);
            return response;
        }

    }
}