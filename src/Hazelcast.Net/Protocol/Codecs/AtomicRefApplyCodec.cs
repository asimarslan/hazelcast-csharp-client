// Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// <auto-generated>
//   This code was generated by a tool.
//     Hazelcast Client Protocol Code Generator
//     https://github.com/hazelcast/hazelcast-client-protocol
//   Change to this file will be lost if the code is regenerated.
// </auto-generated>

#pragma warning disable IDE0051 // Remove unused private members
// ReSharper disable UnusedMember.Local
// ReSharper disable RedundantUsingDirective
// ReSharper disable CheckNamespace

using System;
using System.Threading;
using System.Threading.Tasks;
using System.Collections.Generic;
using Hazelcast.Protocol.BuiltInCodecs;
using Hazelcast.Protocol.CustomCodecs;
using Hazelcast.Core;
using Hazelcast.Messaging;
using Hazelcast.Logging;
using Hazelcast.Clustering;
using Hazelcast.Serialization;
using Microsoft.Extensions.Logging;

namespace Hazelcast.Protocol.Codecs
{
    /// <summary>
    /// Applies a function on the value
    ///</summary>
#if SERVER_CODEC
    internal static class AtomicRefApplyServerCodec
#else
    internal static class AtomicRefApplyCodec
#endif
    {
        public const int RequestMessageType = 655616; // 0x0A0100
        public const int ResponseMessageType = 655617; // 0x0A0101
        private const int RequestReturnValueTypeFieldOffset = Messaging.FrameFields.Offset.PartitionId + BytesExtensions.SizeOfInt;
        private const int RequestAlterFieldOffset = RequestReturnValueTypeFieldOffset + BytesExtensions.SizeOfInt;
        private const int RequestInitialFrameSize = RequestAlterFieldOffset + BytesExtensions.SizeOfBool;
        private const int ResponseInitialFrameSize = Messaging.FrameFields.Offset.ResponseBackupAcks + BytesExtensions.SizeOfByte;

#if SERVER_CODEC
        public sealed class RequestParameters
        {

            /// <summary>
            /// CP group id of this IAtomicReference instance.
            ///</summary>
            public Hazelcast.CP.RaftGroupId GroupId { get; set; }

            /// <summary>
            /// The name of this IAtomicReference instance.
            ///</summary>
            public string Name { get; set; }

            /// <summary>
            /// The function applied to the value.
            ///</summary>
            public IData Function { get; set; }

            /// <summary>
            /// 0 returns no value, 1 returns the old value,
            /// 2 returns the new value
            ///</summary>
            public int ReturnValueType { get; set; }

            /// <summary>
            /// Denotes whether result of the function will be
            /// set to the IAtomicRefInstance
            ///</summary>
            public bool Alter { get; set; }
        }
#endif

        public static ClientMessage EncodeRequest(Hazelcast.CP.RaftGroupId groupId, string name, IData function, int returnValueType, bool alter)
        {
            var clientMessage = new ClientMessage
            {
                IsRetryable = false,
                OperationName = "AtomicRef.Apply"
            };
            var initialFrame = new Frame(new byte[RequestInitialFrameSize], (FrameFlags) ClientMessageFlags.Unfragmented);
            initialFrame.Bytes.WriteIntL(Messaging.FrameFields.Offset.MessageType, RequestMessageType);
            initialFrame.Bytes.WriteIntL(Messaging.FrameFields.Offset.PartitionId, -1);
            initialFrame.Bytes.WriteIntL(RequestReturnValueTypeFieldOffset, returnValueType);
            initialFrame.Bytes.WriteBoolL(RequestAlterFieldOffset, alter);
            clientMessage.Append(initialFrame);
            RaftGroupIdCodec.Encode(clientMessage, groupId);
            StringCodec.Encode(clientMessage, name);
            DataCodec.Encode(clientMessage, function);
            return clientMessage;
        }

#if SERVER_CODEC
        public static RequestParameters DecodeRequest(ClientMessage clientMessage)
        {
            using var iterator = clientMessage.GetEnumerator();
            var request = new RequestParameters();
            var initialFrame = iterator.Take();
            request.ReturnValueType = initialFrame.Bytes.ReadIntL(RequestReturnValueTypeFieldOffset);
            request.Alter = initialFrame.Bytes.ReadBoolL(RequestAlterFieldOffset);
            request.GroupId = RaftGroupIdCodec.Decode(iterator);
            request.Name = StringCodec.Decode(iterator);
            request.Function = DataCodec.Decode(iterator);
            return request;
        }
#endif

        public sealed class ResponseParameters
        {

            /// <summary>
            /// The result of the function application.
            ///</summary>
            public IData Response { get; set; }
        }

#if SERVER_CODEC
        public static ClientMessage EncodeResponse(IData response)
        {
            var clientMessage = new ClientMessage();
            var initialFrame = new Frame(new byte[ResponseInitialFrameSize], (FrameFlags) ClientMessageFlags.Unfragmented);
            initialFrame.Bytes.WriteIntL(Messaging.FrameFields.Offset.MessageType, ResponseMessageType);
            clientMessage.Append(initialFrame);
            CodecUtil.EncodeNullable(clientMessage, response, DataCodec.Encode);
            return clientMessage;
        }
#endif

        public static ResponseParameters DecodeResponse(ClientMessage clientMessage)
        {
            using var iterator = clientMessage.GetEnumerator();
            var response = new ResponseParameters();
            iterator.Take(); // empty initial frame
            response.Response = CodecUtil.DecodeNullable(iterator, DataCodec.Decode);
            return response;
        }

    }
}